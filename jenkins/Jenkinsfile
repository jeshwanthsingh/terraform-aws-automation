pipeline {
    agent any
    
    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        TF_IN_AUTOMATION = 'true'
    }
    
    stages {
        stage('Setup') {
            steps {
                sh 'mkdir -p terraform'
                
                // Create Terraform configuration file
                writeFile file: 'terraform/main.tf', text: '''
provider "aws" {
  region = "us-east-1"
}

resource "aws_instance" "app_server" {
  ami           = "ami-00874d747dde814fa"
  instance_type = "t2.micro"
  key_name      = "Terraform_Automation"

  tags = {
    Name = "Terraform-Managed-Instance"
    Environment = "Development"
  }
}

resource "aws_security_group" "app_sg" {
  name        = "app-sg"
  description = "Allow web and SSH traffic"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "SSH"
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTP"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow all outbound traffic"
  }

  tags = {
    Name = "Terraform-Managed-SG"
  }
}

output "instance_public_ip" {
  value = aws_instance.app_server.public_ip
  description = "Public IP of the EC2 instance"
}

output "ssh_command" {
  value = "ssh -i ~/.ssh/Terraform_Automation.pem ubuntu@${aws_instance.app_server.public_ip}"
  description = "SSH command to connect to the instance"
}
'''
            }
        }
        
        stage('Terraform Init') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                }
            }
        }
        
        stage('Terraform Plan') {
            when {
                expression { params.ACTION == 'plan' || params.ACTION == 'apply' }
            }
            steps {
                dir('terraform') {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }
        
        stage('Terraform Apply') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                dir('terraform') {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }
        
        stage('Terraform Destroy') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                dir('terraform') {
                    sh 'terraform destroy -auto-approve'
                }
            }
        }
    }
}
